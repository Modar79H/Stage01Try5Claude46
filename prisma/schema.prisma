// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String         @unique
  emailVerified DateTime?
  password      String?        // Hashed password
  image         String?
  accounts      Account[]
  sessions      Session[]
  brands        Brand[]
  conversations Conversation[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Brand {
  id            String         @id @default(cuid())
  name          String
  userId        String
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  products      Product[]
  conversations Conversation[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  @@unique([userId, name])
}

model Product {
  id            String         @id @default(cuid())
  name          String
  brandId       String
  brand         Brand          @relation(fields: [brandId], references: [id], onDelete: Cascade)
  reviewsFile   String         // Original CSV filename
  reviewsCount  Int            @default(0)
  competitors   Competitor[]
  analyses      Analysis[]
  conversations Conversation[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  isProcessing  Boolean        @default(false)

  @@unique([brandId, name])
}

model Competitor {
  id          String  @id @default(cuid())
  name        String
  productId   String
  product     Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  reviewsFile String  // Original CSV filename
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([productId, name])
}

model Analysis {
  id            String   @id @default(cuid())
  productId     String
  product       Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  type          String   // sentiment, personas, etc.
  data          Json     // Analysis results
  status        String   @default("pending") // pending, processing, completed, failed
  error         String?  // Error message if failed
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@unique([productId, type])
}

model Review {
  id             String   @id @default(cuid())
  productId      String
  competitorId   String?  // null for main product reviews
  originalText   String   @db.Text
  rating         Float?
  date           DateTime?
  metadata       Json?    // Additional fields from CSV
  pineconeId     String   @unique // Reference to Pinecone vector
  analysisTagged Boolean  @default(false) // Whether it's been tagged for analysis
  createdAt      DateTime @default(now())

  @@index([productId])
  @@index([competitorId])
  @@index([rating])
  @@index([date])
}

model Conversation {
  id           String    @id @default(cuid())
  userId       String
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  brandId      String?
  brand        Brand?    @relation(fields: [brandId], references: [id], onDelete: SetNull)
  productId    String?
  product      Product?  @relation(fields: [productId], references: [id], onDelete: SetNull)
  title        String
  context      Json?     // Cached context data
  messages     Message[]
  isActive     Boolean   @default(true)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@index([userId])
  @@index([brandId])
  @@index([productId])
}

model Message {
  id             String       @id @default(cuid())
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  role           String       // 'user' or 'assistant'
  content        String       @db.Text
  metadata       Json?        // Additional data like sources, confidence, etc.
  createdAt      DateTime     @default(now())

  @@index([conversationId])
}